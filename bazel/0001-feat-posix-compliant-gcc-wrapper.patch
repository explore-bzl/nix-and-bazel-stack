From bad9300db130fbb402578c1fbb706206696bdd3f Mon Sep 17 00:00:00 2001
From: Artur Stachecki <dev@r2r.sh>
Date: Fri, 25 Oct 2024 14:13:02 +0000
Subject: [PATCH] feat: posix-compliant gcc wrapper

---
 toolchain/cc_toolchain_config.bzl |  1 -
 toolchain/wrapper.sh.tpl          | 43 ++++++++++++++++---------------
 2 files changed, 22 insertions(+), 22 deletions(-)
 mode change 100644 => 100755 toolchain/wrapper.sh.tpl

diff --git a/toolchain/cc_toolchain_config.bzl b/toolchain/cc_toolchain_config.bzl
index daddea2..bb3f686 100644
--- a/toolchain/cc_toolchain_config.bzl
+++ b/toolchain/cc_toolchain_config.bzl
@@ -118,7 +118,6 @@ def _impl(ctx):
                         flags = [
                             "-Wl,-z,relro,-z,now",
                             "-pass-exit-codes",
-                            "-lm",
                         ],
                     ),
                 ],
diff --git a/toolchain/wrapper.sh.tpl b/toolchain/wrapper.sh.tpl
old mode 100644
new mode 100755
index b9627e9..27ffac6
--- a/toolchain/wrapper.sh.tpl
+++ b/toolchain/wrapper.sh.tpl
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/bin/sh
 
 # Copyright (c) Joby Aviation 2022
 # Original authors: Thulio Ferraz Assis (thulio@aspect.dev), Aspect.dev
@@ -17,31 +17,32 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-set -o errexit -o nounset -o pipefail
+set -eu
 
 # Getting the execroot by navigating to a relative directory from the resolved
 # symlinks of the BASH_SOURCE[0] is more reliable than navigating to the
 # execroot from $PWD. This is due to the fact that the Bazel C++ toolchain can
 # be called from different working directories (e.g. rules_foreign_cc rules).
-EXECROOT="${EXECROOT:-"$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../../..")"}"
-export EXECROOT
-export PATH="__PATH__"
-args=("$@")
+case "${0}" in
+    /*)
+        script_path="${0}"
+        ;;
+    *)
+        script_path="${PWD}/${0}"
+        ;;
+esac
+
+case "${script_path}" in
+    */*)
+        script_dir="${script_path%/*}"
+        ;;
+    *)
+        script_dir="."
+        ;;
+esac
 
-for i in "${!args[@]}"; do
-    val="${args[i]}"
+export EXECROOT="${EXECROOT:-`cd "$script_dir/../../.."; pwd`}"
+export PATH="__PATH__"
 
-    # Make --sysroot flag absolute for GCC.
-    if [[ "${val}" == "--sysroot" ]]; then
-        next_index=$((i+1))
-        val=${args["${next_index}"]}
-        if [ -n "${EXT_BUILD_ROOT:-}" ]; then val=${val/"${EXT_BUILD_ROOT}/"/""}; fi
-        if [[ "${val}" == "/"* ]]; then
-            # The path already seems to be absolute.
-            continue
-        fi
-        args["${next_index}"]="${EXECROOT}/${val}"
-    fi
-done
+exec "${EXECROOT}/__binary__" "$@"
 
-exec "${EXECROOT}/__binary__" "${args[@]}"
-- 
2.47.0

